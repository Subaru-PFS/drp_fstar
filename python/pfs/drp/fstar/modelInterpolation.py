import numpy as np
from . import parallel

import pickle


class ModelInterpolation:
    """Read an RBF picke file model

    Parameters
    ----------
    model : `list` of `scipy.interpolate.Rbf`
        RBF model generated by `makeRBFInterpolationModel.py`.
    """

    def __init__(self, model):
        self.model = model

    @classmethod
    def fromPickle(cls, path):
        """Read an RBF model from a picke file

        Parameters
        ----------
        path : 'str'
            File name of an RBF model
            generated by `makeRBFInterpolationModel.py`.

        Returns
        -------
        modelInterpolation : `ModelInterpolation`
            The model.
        """
        with open(path, "rb") as f:
            return cls(pickle.load(f))

    def interpolate(self, teff, logg, metal, alpha, nProcs=1):
        """Generate an interpolated spectrum at a given parameter point.

        Parameters
        ----------
        teff : `float`
            Effective temepature in K for interpolation.
        logg : `float`
            Surface gravity in log(/(cm/s^2)) for interpolation.
        metal : `float`
            Metallicity [Fe/H] for interpolation.
        alpha : `float`
            Alpha element index [alpha/Fe] for interpolation.
        nProcs : 'int`, optional
            A number of processes.

        Returns
        -------
        spectrum : `numpy.ndarray`
            Interpolation spectrum.
        """
        def doInterpolation(model):
            interpolationFunction = model
            interpolatedFlux = interpolationFunction(teff/1e3, logg, metal, alpha)
            return interpolatedFlux
        spectrum = parallel.parallel_map(doInterpolation, self.model, n_procs=nProcs)
        return np.hstack(spectrum)
